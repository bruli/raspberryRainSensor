// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rain

import (
	"sync"
)

var (
	lockHumidityReaderMockRead sync.RWMutex
)

// Ensure, that HumidityReaderMock does implement HumidityReader.
// If this is not the case, regenerate this file with moq.
var _ HumidityReader = &HumidityReaderMock{}

// HumidityReaderMock is a mock implementation of HumidityReader.
//
//     func TestSomethingThatUsesHumidityReader(t *testing.T) {
//
//         // make and configure a mocked HumidityReader
//         mockedHumidityReader := &HumidityReaderMock{
//             ReadFunc: func() (uint16, error) {
// 	               panic("mock out the Read method")
//             },
//         }
//
//         // use mockedHumidityReader in code that requires HumidityReader
//         // and then make assertions.
//
//     }
type HumidityReaderMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func() (uint16, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
		}
	}
}

// Read calls ReadFunc.
func (mock *HumidityReaderMock) Read() (uint16, error) {
	if mock.ReadFunc == nil {
		panic("HumidityReaderMock.ReadFunc: method is nil but HumidityReader.Read was just called")
	}
	callInfo := struct {
	}{}
	lockHumidityReaderMockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	lockHumidityReaderMockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedHumidityReader.ReadCalls())
func (mock *HumidityReaderMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	lockHumidityReaderMockRead.RLock()
	calls = mock.calls.Read
	lockHumidityReaderMockRead.RUnlock()
	return calls
}
